% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fill_NA_N.R
\name{fill_NA_N}
\alias{fill_NA_N}
\title{\code{fill_NA_N} function for the multiple imputations purpose.}
\usage{
fill_NA_N(x, model, posit_y, posit_x, w = NULL, logreg = FALSE,
  times = 10)
}
\arguments{
\item{x}{a numeric matrix or data.frame/data.table (factor/character/numeric) - variables}

\item{model}{a character - posibble options ("lm_bayes","lm_noise")}

\item{posit_y}{an integer/character - a position/name of dependent variable}

\item{posit_x}{an integer/character vector - positions/names of independent variables}

\item{w}{a numeric vector - a weighting variable - only positive values, Default: NULL}

\item{logreg}{a boolean - if dependent variable has log-normal distribution (numeric). If TRUE log-regression is evaluated and then returned exponential of results., Default: FALSE}

\item{times}{an integer - a number of multiple imputations, Default:10}
}
\value{
load imputations in a numeric/character/factor (similar to the input type) vector format
}
\description{
Multiple imputations to fill the missing data.
Non missing independent variables are used to approximate a missing observations for a dependent variable.
Quantitative models were built under Rcpp packages and the C++ library Armadillo.
}
\note{
There is assumed that users add the intercept by their own.
The miceFast module provides the most efficient environment, the second option is to use data.table and the numeric matrix data type.
The lda model is assessed only if there are more than 15 complete observations
and for the lms models if number of variables is smaller than number of observations.
}
\examples{
\dontrun{
library(miceFast)
library(data.table)
library(magrittr)
library(mice)
library(dplyr)

### Intro:data.table
#### Working with names
data = cbind(as.matrix(mice::nhanes),intercept=1,index=1:nrow(mice::nhanes))
data = do.call(rbind,replicate(10,data,simplify = F))
data_df = as.data.frame(data)
data_DT = data.table(data)

data_DT[,bmi_imp:=fill_NA(x=.SD,
                         model="lm_pred",
                         posit_y='bmi',
                         posit_x='intercept')] \%>\%
 .[,hyp_imp:=fill_NA(x=.SD,
                     model="lda",
                     posit_y='hyp',
                     posit_x=c('age','bmi_imp')),] \%>\%
 .[,chl_imp:=fill_NA_N(x=.SD,
                       model="lm_noise",
                       posit_y='chl',
                       posit_x=c('age','bmi_imp','hyp_imp'),
                       times=10),]

head(data_DT,2)

#### Working with positions

data_DT[,bmi_imp:=fill_NA(x=.SD,
                         model="lm_pred",
                         posit_y=2,
                         posit_x=5)] \%>\%
 # there is a new variable at position 7 - bmi_imp
 .[,hyp_imp:=fill_NA(x=.SD,
                     model="lda",
                     posit_y=3,
                     posit_x=c(1,7)),] \%>\%
 .[,chl_imp:=fill_NA_N(x=.SD,
                       model="lm_noise",
                       posit_y=4,
                       posit_x=c(1,7,8),
                       times=10),]

head(data_DT,2)

### Intro:dplyr

#### Working with names

data_df = data_df \%>\% mutate(bmi_imp=fill_NA(x=.,
                                            model="lm_pred",
                                            posit_y='bmi',
                                            posit_x='intercept')) \%>\%
 mutate(hyp_imp=fill_NA(x=.,
                        model="lda",
                        posit_y='hyp',
                        posit_x=c('age','bmi_imp'))) \%>\%
 mutate(chl_imp=fill_NA_N(x=.,
                          model="lm_noise",
                          posit_y='chl',
                          posit_x=c('age','bmi_imp','hyp_imp'),
                          times=10))

head(data_df,2)



#### Working with positions

data_df = data_df \%>\% mutate(bmi_imp=fill_NA(x=.,
                                            model="lm_pred",
                                            posit_y=2,
                                            posit_x=5)) \%>\%
 #there is a new variable at position 7 - bmi_imp
 mutate(hyp_imp=fill_NA(x=.,
                        model="lda",
                        posit_y=3,
                        posit_x=c(1,7))) \%>\%
 mutate(chl_imp=fill_NA_N(x=.,
                          model="lm_noise",
                          posit_y=4,
                          posit_x=c(1,7,8),
                          times=10))

head(data_df,2)

### Model with additional parameters: - data with the grouping/weighting variable
### data.table recommended

data = cbind(as.matrix(airquality[,-5]),Intercept=1,index=1:nrow(airquality),
            # a numeric vector - positive values
            weights = round(rgamma(nrow(airquality),3,3),1),
            groups = airquality[,5])

data = do.call(rbind,replicate(10,data,simplify = F))

data_DT = data.table(data)


#### Working with names

data_DT[,Ozone_imp:=fill_NA(x=.SD,
                           model="lm_pred",
                           posit_y='Ozone',
                           posit_x='Intercept',w=.SD[['weights']]),by=.(groups)] \%>\%
 .[,Solar_R_imp:=fill_NA_N(.SD,
                           model="lm_bayes",
                           posit_y='Solar.R',
                           posit_x=c('Wind','Temp','Day','Intercept','Ozone_imp'),
                           w=.SD[['weights']],
                           times=10),by=.(groups)]

data_DT[which(is.na(data_DT[,1]))[1],]


#### Working with positions

# simple mean imputation - intercept at position 6
data_DT[,Ozone_imp:=fill_NA(x=.SD,
                           model="lm_pred",
                           posit_y=1,
                           posit_x=c(6),w=.SD[['weights']]),by=.(groups)] \%>\%
 # avg of 10 multiple imputations - last posit_x equal to 9 not 10
 # because the groups variable is not included in .SD
 .[,Solar_R_imp:=fill_NA_N(.SD,
                           model="lm_bayes",
                           posit_y=2,
                           posit_x=c(3,4,5,6,9),
                           w=.SD[['weights']],times=10),by=.(groups)]

data_DT[which(is.na(data_DT[,1]))[1],]
}

}
\seealso{
\code{\link{fill_NA}} \code{\link{VIF}}
}
